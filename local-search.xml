<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>移动第二季度交付内容说明</title>
    <link href="/2023/07/13/%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%BA%8C%E5%AD%A3%E5%BA%A6%E4%BA%A4%E4%BB%98%E5%86%85%E5%AE%B9%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/07/13/%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%BA%8C%E5%AD%A3%E5%BA%A6%E4%BA%A4%E4%BB%98%E5%86%85%E5%AE%B9%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="主要文件"><a href="#主要文件" class="headerlink" title="主要文件"></a>主要文件</h2><ol><li><strong>mobile.zip</strong>文件<br>包含移动3个测试集及处理好格式的标签文件</li><li><strong>vad_mobile1.zip</strong>文件<br>包含对vad_mobile1模型的训练和测试环境</li><li><strong>vad_mobile2.zip</strong>文件和<strong>vad_mobile3.zip</strong>文件<br>和2类似</li></ol><h2 id="训练和测试前的准备"><a href="#训练和测试前的准备" class="headerlink" title="训练和测试前的准备"></a>训练和测试前的准备</h2><ol><li>将mobile.zip解压为<strong>路径A</strong>下<strong>同名</strong>文件夹, 用于<strong>保存数据</strong></li><li>将vad_mobile1.zip, vad_mobile2.zip, vad_mobile3.zip解压为<strong>路径B</strong>下<strong>同名</strong>文件夹, 用于<strong>训练&#x2F;测试</strong></li><li>打开vad_mobile1, 2, 3文件夹下的<code>path.sh</code>, 修改第5行的<code>KALDI_ROOT</code>为你们的kaldi路径</li></ol><h2 id="复现mobile1测试结果"><a href="#复现mobile1测试结果" class="headerlink" title="复现mobile1测试结果"></a>复现mobile1测试结果</h2><p>%%</p><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><ol><li>打开vad_mobile1中的run.sh, 修改第33行的<code>DIHARD_DEV_DIR</code>为上述<code>路径A/switchboard</code></li><li>确保终端的路径在<code>路径B/vad_mobile1</code>, 并运行run.sh即可训练脚本</li></ol><blockquote><p>[!NOTE] 注意<br>本代码已经训练好了可直接测试, 非特殊需要无需重新训练</p></blockquote><p>%%</p><ol><li>打开vad_mobile1中的run_test.sh, 修改第33行中的<code>EVAL_DIR</code>为<code>路径A/mobile/offline-test-data-1-mono</code></li><li>确保终端的路径在<code>路径B/vad_mobile1</code>, 并在终端执行&#x3D;&#x3D;.&#x2F;run_test.sh&#x3D;&#x3D;即可测试数据</li><li>测试结果将写入<code>路径B/vad_mobile1/result.txt</code>, 如下图所示, 注意<strong>红框部分</strong>即可:<br>![[Pasted image 20230712154649.png]]<br>其中, 过滤量为 <strong>(100-fa)%</strong> , 误过滤量为<strong>miss%</strong></li><li>可以看到, <strong>过滤量为85%, 误过滤量为2.22%</strong>, 接近第三季度交付标准</li></ol><blockquote><p>[!note] 注意<br>vad对测试集的识别结果将以rttm格式写入<code>路径B/vad_mobile1/data/mobile_eval_seg/segments</code>这个文本文件</p></blockquote><h2 id="复现mobile2测试结果"><a href="#复现mobile2测试结果" class="headerlink" title="复现mobile2测试结果"></a>复现mobile2测试结果</h2><ol><li>打开vad_mobile2中的run_test.sh, 修改第33行中的<code>EVAL_DIR</code>为<code>路径A/mobile/offline-test-data-2-stereo-to-mono</code></li><li>确保终端的路径在<code>路径B/vad_mobile2</code>, 并在终端执行&#x3D;&#x3D;.&#x2F;run_test.sh&#x3D;&#x3D;, 即可测试数据</li><li>测试结果将写入<code>路径B/vad_mobile2/result.txt</code>, 如下图所示, 注意<strong>红框部分</strong>即可:<br>![[Pasted image 20230712155259.png]]<br>其中, 过滤量为 <strong>(100-fa)%</strong> , 误过滤量为<strong>miss%</strong></li><li>可以看到, <strong>过滤量为88.58%, 误过滤量为1.91%</strong>, 达到第三季度交付标准</li></ol><blockquote><p>[!note] 注意<br>vad对测试集的识别结果将以rttm格式写入<code>路径B/vad_mobile2/data/mobile_eval_seg/segments</code>这个文本文件</p></blockquote><h2 id="复现mobile3测试结果"><a href="#复现mobile3测试结果" class="headerlink" title="复现mobile3测试结果"></a>复现mobile3测试结果</h2><ol><li>打开vad_mobile3中的run_test_AB.sh, 修改第33行中的<code>EVAL_DIR</code>为<code>路径A/mobile/offline-test-data-3-stereo</code></li><li>确保终端的路径在<code>路径B/vad_mobile3</code>, 并在终端执行&#x3D;&#x3D;.&#x2F;run_test_AB.sh&#x3D;&#x3D;, 即可测试数据:</li><li>测试结果将写入<code>路径B/vad_mobile1/result.txt</code>, 如下图所示, 注意<strong>红框部分</strong>即可:<br>![[Pasted image 20230712160237.png]]<br>其中, 过滤量为 <strong>(100-fa)%</strong> , 误过滤量为<strong>miss%</strong></li><li>可以看到, <strong>过滤量为84.95%, 误过滤量为2.79%</strong>, 接近第三季度交付标准</li></ol><blockquote><p>[!note] 注意<br>vad对测试集的识别结果将以rttm格式写入<code>路径B/vad_mobile3/data/mobile_eval_seg/segments</code>这个文本文件</p></blockquote><h2 id="如何测试另外的数据"><a href="#如何测试另外的数据" class="headerlink" title="如何测试另外的数据"></a>如何测试另外的数据</h2><p>读完上文并复现后可知, 我们测试时要输入给脚本待测数据集及其人工标签的路径, 脚本会输出vad识别后的结果及其和人工标签比较后的得分.</p><p>所以, 测试新数据时, 我们只需仿造上面给到的数据集目录mobile, 构造格式一致的待测数据以及相关标签文件即可.</p><p>要是新数据没有标签文件怎么办呢, 只需随便构造一份符合格式的假标签, 并把路径输入给脚本即可.</p><h3 id="具体需要什么测试相关文件"><a href="#具体需要什么测试相关文件" class="headerlink" title="具体需要什么测试相关文件"></a>具体需要什么测试相关文件</h3><p>如下图所示是交付的mobile文件夹的具体结构:<br>![[Pasted image 20230712165211.png]]</p><h4 id="rttm目录"><a href="#rttm目录" class="headerlink" title="rttm目录"></a>rttm目录</h4><p>其中, rttm_new目录中存放的是{uri}.rttm文件, 如下图所示:<br>![[Pasted image 20230712170008.png]]</p><p>若要构造假标签, 每个音频只需写入一行rttm即可, 如音频<strong>a.wav</strong>总时长10s, 我们构造一个<strong>a.rttm</strong>放入rttm_new目录里, 内容如下:</p><blockquote><p>SPEAKER a 1 0 10 &lt;NA&gt; &lt;NA&gt; a1 &lt;NA&gt; &lt;NA&gt;</p></blockquote><p>同理, 其他目录参考原目录完成即可.</p><h4 id="sad目录"><a href="#sad目录" class="headerlink" title="sad目录"></a>sad目录</h4><p><strong>sad目录</strong>存放的是<strong>lab</strong>后缀的文本文件, 文件的内容为语音段的时间点<br>![[Pasted image 20230712181121.png]]</p><h4 id="all-uem文本文件"><a href="#all-uem文本文件" class="headerlink" title="all.uem文本文件"></a>all.uem文本文件</h4><p><strong>all.uem</strong>的内容是每个音频的总时长, 具体如下图所示:<br>![[Pasted image 20230712181239.png]]</p><h4 id="table-csv文件"><a href="#table-csv文件" class="headerlink" title="table.csv文件"></a>table.csv文件</h4><p>按格式构造即可, mobile文件夹中有相关代码供参考<br>![[Pasted image 20230712181346.png]]</p><blockquote><p>[!NOTE] 注意<br>生成的目录务必要和参考目录文件夹名称&#x2F;路径一致</p></blockquote><h3 id="相关文件生成后如何测试"><a href="#相关文件生成后如何测试" class="headerlink" title="相关文件生成后如何测试"></a>相关文件生成后如何测试</h3><ol><li>打开vad_mobile1目录下的run_test.sh, 修改第33行的<code>EVAL_DIR</code>, 第36行的<code>wav_dir</code></li><li>确保终端的路径在<code>路径B/vad_mobile1</code>, 并在终端执行&#x3D;&#x3D;.&#x2F;run_test.sh&#x3D;&#x3D;, 即可测试数据</li></ol><h2 id="如何用新的数据集训练"><a href="#如何用新的数据集训练" class="headerlink" title="如何用新的数据集训练"></a>如何用新的数据集训练</h2><p>类似的, 训练模型也要准备相关的文件, 但种类更少. </p><p>我们只需创建训练音频目录, 相应的rttm目录和sad目录(这两个均由人工标签文件生成), 如下图所示:</p><p>![[Pasted image 20230712174110.png]]</p><p>接下来打开vad_mobile1目录下的run.sh, 修改第33-36行的路径, 并确保终端目录在<code>路径B/vad_mobile1</code>下, 执行&#x3D;&#x3D;.&#x2F;run.sh&#x3D;&#x3D;即可开始训练模型</p>]]></content>
    
    
    
    <tags>
      
      <tag>思考输出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/13/hello-world/"/>
    <url>/2023/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2023/07/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2023/07/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>#test</p><h2 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a>Chapter1</h2><p>Contents</p><hr><h2 id="Chapter2"><a href="#Chapter2" class="headerlink" title="Chapter2"></a>Chapter2</h2><p>Contents</p><hr><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p><a href="http://www.bilibili.com/">www.bilibili.com</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>test1</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
